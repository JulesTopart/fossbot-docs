{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FOSSBot Documentation","text":"<p>Welcome to the temporary FOSSBot documentation!  FOSSBot is an open-source, two-wheeled educational robot designed by GFOSS and Harokopio University of Athens. It is customizable, affordable, and ideal for STEM education at all levels.</p> <p></p>"},{"location":"#what-is-fossbot","title":"What is FOSSBot?","text":"<p>FOSSBot is a small, customizable robot that helps people learn about technology, coding, engineering and many more topics. It\u2019s designed to be easy to build and program, so anyone can start experimenting with robotics, even if they have no prior experience. As the project is still under active development, some features may not be 100% functional.</p>"},{"location":"#how-does-it-work","title":"How does it work?","text":"<p>At the heart of FOSSBot is its \u201cbrain\u201d \u2014 a tiny computer called a Raspberry Pi Zero. This is where all the robot\u2019s decisions are made, whether it\u2019s moving forward, turning, or following instructions programmed by you. </p> <p>The robot senses the world around it using sensors like a distance sensors, light sensors\u2026</p> <p>You can control FOSSBot in different ways:</p> <ul> <li>No-code mode for complete beginners (using Blockly)</li> <li>Block-based programming (where you drag and drop instructions)</li> <li>Python coding for more advanced users</li> </ul>"},{"location":"#what-can-you-do-with-fossbot","title":"What can you do with FOSSBot?","text":"<p>With FOSSBot, you can:</p> <ul> <li>Program the robot to draw pictures using its built-in pencil holder</li> <li>Explore coding by creating simple or complex tasks for it to perform</li> <li>Learn how different sensors work and how robots navigate their environment</li> </ul> <p>FOSSBot is perfect for schools, coding workshops, or even at home as a fun project.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Affordable and customizable: FOSSBot is made from 3D-printed parts and low-cost electronics, so it\u2019s easy to build and fix. You can print the robot\u2019s body yourself and adjust it to your liking.</li> <li>Durable and flexible: The robot\u2019s plastic parts are strong and designed to protect its wheels and sensors.</li> <li>LEGO-compatible: You can add LEGO bricks to the robot, making it even more fun to customize and expand.</li> <li>Learning-friendly: FOSSBot supports no-coding, block-based coding, and full Python programming, making it suitable for all skill levels.</li> </ul>"},{"location":"#how-its-built","title":"How it\u2019s built","text":"<p>The robot is made up of:</p> <ul> <li>3D-printed plastic parts: You can download the designs and print them yourself, using strong materials that keep everything secure.</li> <li>Electronic components: The robot uses motors for the wheels, sensors for detecting movement, and an LED for visual feedback.</li> <li>Raspberry Pi computer: This is the robot\u2019s \u201cbrain\u201d where all the thinking happens. It runs a special operating system and software that lets you control and program the robot.</li> </ul>"},{"location":"#ready-to-get-started","title":"Ready to get started?","text":"<p>You can download the 3D designs, follow the instructions to assemble your FOSSBot, and dive into programming with our easy-to-use platform. Whether you\u2019re a student, teacher, or just curious, FOSSBot is a fun way to explore the world of robotics!</p> <p>Check out the User Guide for assembly tips or head to the Developper section if you want to contribute or explore the advanced features.</p>"},{"location":"assembly-instructions/","title":"Assembly","text":"<p>This page is work in progress but a PDF is already available :</p> <p>Download PDF</p> <p></p>"},{"location":"dev/","title":"Developers","text":"<p>Welcome, developers! This section is for those interested in contributing to FOSSBot\u2019s development, whether by improving the hardware or enhancing the software.</p>"},{"location":"dev/#getting-started","title":"Getting Started","text":"<pre><code>git clone https://github.com/FOSSBot/FOSSBot.git\n</code></pre>"},{"location":"editor/","title":"Editor","text":"<p>Let\u2019s learn how to access the FOSSBot program editor and start working on your projects!</p>"},{"location":"editor/#getting-started","title":"Getting Started","text":"<p>Before we dive into the editor, make sure your FOSSBot is powered on and connected to the same Wi-Fi as your computer. If you haven\u2019t set up the Wi-Fi yet, check the Wi-Fi Setup page for help.</p>"},{"location":"editor/#accessing-the-robot-interface","title":"Accessing the Robot Interface","text":"<p>To control and program your FOSSBot, you\u2019ll need to access the robot\u2019s web interface from your computer. Here\u2019s how:</p> <ol> <li> <p>Power On the Robot    - Turn on your FOSSBot, and it will automatically connect to your Wi-Fi.    - If it doesn\u2019t, no worries! Head over to the Wi-Fi Setup page to resolve this.</p> </li> <li> <p>Open the Web Interface    - On your computer (connected to the same Wi-Fi as the robot), open Chrome or Firefox.    - In the address bar, type: <code>http://fossbot-000.local:8081</code> (Remember, the \u201c000\u201d part is unique to your robot.)</p> </li> </ol> <p></p> <p>Once you\u2019ve accessed the page, you\u2019re ready to interact with your robot!</p> <p>Failure</p> <p>If that address doesn\u2019t work, it might be because your router doesn\u2019t recognize the robot by name. In that case, check your router\u2019s admin page to find the robot\u2019s IP address and type it into the browser like this: <code>http://192.168.1.xxx:8080</code>. You may want to reach an IT Expert to find out the robot IP adress. It\u2019s easy to spot using a network analyzer app.</p>"},{"location":"editor/#the-project-management-page","title":"The Project Management Page","text":"<p>Now that you\u2019re connected to the robot\u2019s interface, you\u2019ll see the Project Management page. This is where all the programming magic happens.</p> <ul> <li>Manage Projects: Here, you can create, rename, and delete Blockly programming projects. All your projects are stored inside the robot, so you can easily access them anytime.</li> <li>Start New Projects: You can create a new project to start fresh, and the editor will open up with a blank workspace where you can start dragging and dropping blocks to control your FOSSBot.</li> </ul> <p></p>"},{"location":"editor/#troubleshooting-access","title":"Troubleshooting Access","text":"<p>If you\u2019re having trouble accessing the robot\u2019s interface:</p> <ul> <li> <p>Check the Robot\u2019s Connection: Ensure your robot is turned on and connected to the same Wi-Fi as your computer. If the robot isn\u2019t responding to the URL (<code>http://fossbot-000.local:8081</code>), it might not be connected to your network.</p> </li> <li> <p>Robot Back in Setup Mode?: If the robot\u2019s Wi-Fi access point (fossbot-xxx) shows up on your phone or computer, it means the robot has returned to setup mode because it couldn\u2019t connect to the network you previously configured. Follow the Wi-Fi Setup guide to reconnect it.</p> </li> </ul>"},{"location":"editor/#next-steps","title":"Next Steps","text":"<p>Now that you\u2019re connected to the robot and can manage your programming projects, the next step is to start building your own programs using Blockly! Head over to the Programming Guide to learn how to get started with block-based programming for FOSSBot.</p>"},{"location":"electronics-wiring/","title":"Electronics","text":"<p>This page is work in progress but a PDF is already available :</p> <p>Download PDF</p> <p></p>"},{"location":"first-setup/","title":"Wi-Fi setup","text":"<p>Welcome ! Let\u2019s get your FOSSBot connected to Wi-Fi so you can control it from any computer on your network.  Don\u2019t worry, we\u2019ll walk you through everything.</p>"},{"location":"first-setup/#power-on","title":"Power On","text":"<p>Before we dive into Wi-Fi setup, we beed ti start the robot. Power ON the robot by pressing the red power button.  All the LEDs will light up, and the robot will take a few minutes to initialize (usually 30s to 2min).</p> <p></p>"},{"location":"first-setup/#setting-the-wifi-settings","title":"Setting the WiFi settings","text":"<p>Fossbot don\u2019t know you\u2019re WiFi settings yet. We have to set the WiFi SSID and password manually. To do this, the robot will broadcast a Wifi access point that you can use to access the initial setup page. Each time you\u2019re fossbot move to a new location, it will get into this mode.</p>"},{"location":"first-setup/#1-find-the-robots-wi-fi-open-network","title":"1. Find the Robot\u2019s Wi-Fi open network","text":"<ul> <li>Grab your phone and open the Wi-Fi settings.</li> <li>Look for a network named fossbot-xxx (the \u201cxxx\u201d is a unique number for your robot).</li> </ul> <p>Failure</p> <p>If you don\u2019t see the network right away, give it a few seconds and try again. If it still doesn\u2019t show up, try to power off and on.</p>"},{"location":"first-setup/#2-connect-to-the-robots-wi-fi","title":"2. Connect to the Robot\u2019s Wi-Fi","text":"<ul> <li>Select the fossbot-xxx network on your phone or tablet.</li> <li>A pop-up will appear, allowing you to select your home Wi-Fi network.</li> </ul> <p>If the pop-up doesn\u2019t appear automatically, you can open a browser and go to: <code>http://10.41.0.1/</code></p>"},{"location":"first-setup/#3-enter-wi-fi-credentials","title":"3. Enter Wi-Fi Credentials","text":"<ul> <li>Choose your Wi-Fi network from the list and enter your network\u2019s name (SSID) and password.</li> <li>Tap Connect to finish the setup.</li> </ul>"},{"location":"first-setup/#4-confirm-connection","title":"4. Confirm Connection","text":"<ul> <li>Once connected, your robot will remember this network for future use.</li> <li>The FOSSBot access point (fossbot-xxx) will disappear, and your robot is now on your home (or school) Wi-Fi.</li> </ul> <p>Info</p> <p>If you ever change locations or Wi-Fi networks, just repeat these steps to connect to a new network.</p> <p>Success</p> <p>That\u2019s it! You\u2019ve connected your FOSSBot to Wi-Fi and are ready to explore everything it can do. If you ever need to adjust settings, look for the cog icon on the top-right of the robot\u2019s home screen.</p> <p>Have fun experimenting with FOSSBot!</p>"},{"location":"first-setup/#troubleshooting-faq","title":"Troubleshooting &amp; FAQ","text":"<p>Here are some quick fixes for common issues:</p> <p>Can\u2019t find the robot\u2019s network on your phone? - Restart the robot and wait a few seconds for the Wi-Fi network to appear.</p> <p>The pop-up screen disappeared. What now? - Open Chrome on your phone and go to: <code>http://10.41.0.1/</code></p> <p>Can\u2019t access <code>http://fossbot-000.local:8081</code> after setup? - Your router may not recognize the robot by name. Check your router\u2019s admin page for the robot\u2019s IP address, and use it instead (e.g., <code>http://192.168.1.xxx:8080</code>).</p>"},{"location":"guide/","title":"FOSSBot User Guide","text":"<p>Welcome to the FOSSBot User Guide! This guide will help you with everything you need to build, set up, and program your FOSSBot. Whether you are assembling your robot for the first time or troubleshooting an issue, this guide has got you covered. </p> <p>Below, you will find links to each section of the guide based on the task you need help with. Click on any section to get detailed step-by-step instructions.</p>"},{"location":"guide/#first-setup","title":"First Setup","text":"<p>If your Fossbot is already assembled, this section will guide you through the first setup process, to setup the WiFi and connect to the robot programming platform Read First Setup Instructions</p>"},{"location":"guide/#editor-access","title":"Editor access","text":"<p>Learn how to access and use the fossbot program editor Read Assembly Instructions</p>"},{"location":"guide/#simulator-setup","title":"Simulator setup","text":"<p>Learn how to install the Fossbot application to start programming without the physical robot. This will guide you through the install of the Coppelia simulator and the fossbot app. Read Assembly Instructions</p>"},{"location":"guide/#assembly-instructions","title":"Assembly Instructions","text":"<p>Learn how to 3D print and assemble your FOSSBot robot. This section covers everything from printing the plastic parts to securing the motors and electronics inside the robot\u2019s chassis. Read Assembly Instructions</p>"},{"location":"guide/#electronics-wiring","title":"Electronics Wiring","text":"<p>Need help connecting the electronics? This section walks you through the process of wiring the Raspberry Pi, sensors, motors, and LEDs to ensure everything is correctly set up. Read Electronics Wiring Guide</p>"},{"location":"guide/#programming","title":"Programming","text":"<p>Ready to start controlling your robot? Learn how to program the FOSSBot using the no-coding mode, block-based coding (Blockly), or Python. We\u2019ll also cover how to test your programs using the simulator. Read Programming Guide</p>"},{"location":"guide/#troubleshooting","title":"Troubleshooting","text":"<p>Running into issues? This section provides solutions to common problems such as motor calibration, sensor alignment, or software bugs. Read Troubleshooting Guide</p>"},{"location":"programming/","title":"Programming","text":""},{"location":"programming/#1-what-is-blockly","title":"1. What is Blockly?","text":"<p>Blockly is a super easy way to program your FOSSBot without having to write any code. Instead of typing commands, you\u2019ll use blocks \u2014 colorful puzzle-like pieces that fit together. Each block represents a different command or action, and when you snap them together, you\u2019re building a program.</p> <p>This makes Blockly perfect for beginners! You can start creating your own programs right away without worrying about complicated code.</p>"},{"location":"programming/#why-blockly-is-awesome-for-fossbot","title":"Why Blockly is Awesome for FOSSBot","text":"<ul> <li>No code needed: You don\u2019t have to know programming languages. Just drag, drop, and connect blocks.</li> <li>Instant feedback: When you build a program, you can see the robot move and react right away.</li> <li>Fun and creative: With Blockly, you can experiment with different actions and behaviors, like making FOSSBot move, play sounds, and respond to obstacles.</li> </ul>"},{"location":"programming/#fossbot-specific-blocks","title":"FOSSBot-Specific Blocks","text":"<p>FOSSBot has its own set of special blocks designed to control the robot\u2019s unique features. Some of these blocks let you:</p> <ul> <li>Move the robot forward or backward.</li> <li>Turn the robot left or right.</li> <li>Control the LEDs and change their colors.</li> <li>Interact with sensors to detect obstacles, light levels, and more.</li> </ul> <p>You\u2019ll soon be able to use all these blocks to create your own custom programs! To start programming your FOSSBot, you\u2019ll need to access the Blockly editor. If you don\u2019t know how to get on the following page, please check out this Tutorial</p> <p></p>"},{"location":"programming/#2-understanding-the-blockly-interface","title":"2. Understanding the Blockly Interface","text":"<p>Now that you\u2019re in the Blockly editor, let\u2019s get familiar with the different parts of the interface. This will help you quickly find the blocks you need and start building programs.</p> <p></p> <p> </p>"},{"location":"programming/#block-toolbox","title":"Block Toolbox","text":"<p>On the left side of the screen, you\u2019ll see the Block Toolbox. This is where all the action happens! The toolbox contains categories of blocks that you can use to control FOSSBot. Think of it like your toolkit for building programs \u2014 each block is a command or instruction for the robot.</p> <p>Let\u2019s go through the key categories of blocks that you\u2019ll be using.</p> <p> </p>"},{"location":"programming/#logic","title":"Logic","text":"<p>The Logic blocks let you control the flow of your program by making decisions. These blocks are essential for creating programs that can react to different situations.</p> <p>For example, you can tell the robot, \u201cIf there\u2019s an obstacle in front of me, stop moving\u201d by using an if block.</p>"},{"location":"programming/#loops","title":"Loops","text":"<p>The Loops category is where you\u2019ll find blocks that allow the robot to repeat actions. If you want FOSSBot to do something over and over (like moving forward for 5 seconds), loops are your go-to.</p> <p>You can create: - Repeat loops to repeat an action a set number of times. - While loops to keep repeating as long as a certain condition is true.</p>"},{"location":"programming/#variables","title":"Variables","text":"<p>Variables let you store and reuse data, like numbers or sensor readings. In the Variables category, you\u2019ll create custom variables to control aspects of your program.</p> <p>For example, you can create a variable called <code>distance</code> to store how far the robot should move.</p>"},{"location":"programming/#operators","title":"Operators","text":"<p>The Operators category provides blocks that help you do math and compare values. Need to add two numbers together? Or check if one value is greater than another? Operators have got you covered.</p> <p>These blocks are especially useful when you\u2019re working with sensors or variables and want to make decisions based on values.</p>"},{"location":"programming/#text","title":"Text","text":"<p>The Text blocks allow you to work with strings (i.e., sequences of characters like words or sentences). You can use these blocks to create messages, display text, or send commands.</p> <p>For example, you can use a text block to display a message like \u201cObstacle detected!\u201d.</p>"},{"location":"programming/#lists","title":"Lists","text":"<p>Lists are collections of data, and the Lists blocks let you manage them. Think of a list as a group of items, like a shopping list or a list of sensor readings.</p> <p>With lists, you can: - Create a list of values (e.g., distances the robot should move). - Access or modify items in the list.</p>"},{"location":"programming/#movement","title":"Movement","text":"<p>The Movement category is all about controlling FOSSBot\u2019s motors. These blocks allow you to make the robot move forward, backward, turn, or stop.</p> <p>You\u2019ll find blocks for:</p> <ul> <li>Moving a specific distance (e.g., move forward for 10 cm).</li> <li>Turning right or left (90 degrees or continuously).</li> <li>Stopping the robot at any point in your program.</li> </ul>"},{"location":"programming/#interaction","title":"Interaction","text":"<p>The Interaction category helps you control the robot\u2019s non-movement features, like:</p> <ul> <li>Playing sounds through the robot\u2019s speaker.</li> <li>Changing the LED color.</li> <li>Waiting for a set amount of time (useful for adding delays in your program).</li> </ul>"},{"location":"programming/#sensors","title":"Sensors","text":"<p>FOSSBot has sensors to help it interact with the world around it. In the Sensors category, you\u2019ll find blocks that allow you to read data from these sensors.</p> <p>For example, you can: - Use the distance sensor to detect obstacles. - Access the gyroscope to measure the robot\u2019s orientation.</p> <p>With these blocks, you can make the robot respond to its environment, like stopping when it detects something in its way.</p>"},{"location":"programming/#programming-workspace","title":"Programming Workspace","text":"<p>Once you\u2019ve explored the Block Toolbox, it\u2019s time to start building your program! The Programming Workspace is the large white area in the middle of the screen where you\u2019ll place your blocks.</p>"},{"location":"programming/#how-to-use-the-workspace","title":"How to Use the Workspace ?","text":"<ul> <li>Drag and Drop: To start, click on a block in the toolbox and drag it into the workspace. It\u2019s as simple as building with LEGO blocks!</li> <li>Snap Blocks Together: Once you\u2019ve dragged a block into the workspace, connect it to other blocks by snapping them together. This creates a sequence of instructions for the robot to follow.</li> <li>Arrange Your Program: Blocks will execute in the order they\u2019re connected, from top to bottom. Be sure to connect them in the right order to get the result you want!</li> </ul> <p>Now that you know your way around the Blockly interface, you\u2019re ready to start building your first FOSSBot program!</p> <p>Here\u2019s the next section on Basic Programming Concepts:</p>"},{"location":"programming/#3-basic-programming-concepts","title":"3. Basic Programming Concepts","text":"<p>Now that you\u2019re familiar with the Blockly interface, let\u2019s dive into some essential programming concepts to help you start creating programs for FOSSBot.</p>"},{"location":"programming/#instructions-and-sequences","title":"Instructions and Sequences","text":"<p>Every program you build is made up of instructions. Each instruction tells FOSSBot what to do, and the order in which these instructions are executed is called a sequence. </p> <p>Think of instructions as individual steps in a recipe. Just like how you follow a recipe step-by-step to cook a dish, FOSSBot follows each instruction in the order you\u2019ve arranged the blocks.</p>"},{"location":"programming/#building-a-program-block-by-block","title":"Building a Program Block-by-Block","text":"<p>Here\u2019s how you can create a simple program that tells FOSSBot to move forward:</p> <ol> <li> <p>Select the Move Block    From the Movement category in the Block Toolbox, drag the Move Forward block into the workspace. This block tells the robot to move forward.</p> </li> <li> <p>Snap the Block to the Start    Connect the Move Forward block to the start of your program in the workspace. Make sure it\u2019s the first block in your sequence.</p> </li> <li> <p>Adding More Instructions    You can add more instructions by dragging and connecting more blocks. For example, you can add a Turn Right 90 Degrees block after the Move Forward block, making the robot turn after moving.</p> </li> </ol> <p></p> <p>In this way, you can build a complete program by snapping together different blocks, each representing a specific action or behavior for the robot.</p>"},{"location":"programming/#running-a-program","title":"Running a Program","text":"<p>Once you\u2019ve built your program, it\u2019s time to make FOSSBot follow your instructions!</p>"},{"location":"programming/#how-to-run-a-program","title":"How to Run a Program","text":"<ol> <li> <p>Check Your Sequence    Make sure your blocks are connected in the right order. FOSSBot will follow the instructions from top to bottom.</p> </li> <li> <p>Hit the Play Button    In the Blockly editor, look for the Play button on the right side of the screen. Click it to run your program.</p> </li> </ol> <p></p> <p>FOSSBot will start moving and follow the instructions you\u2019ve set up in your program. You\u2019ll be able to watch the robot move according to the commands you\u2019ve programmed.</p> <ol> <li>Stopping the Program    If you need to stop FOSSBot while the program is running, just click the Stop button (located next to the Play button). This will immediately halt any actions the robot is performing.</li> </ol> <p></p>"},{"location":"programming/#experiment","title":"Experiment!","text":"<p>Try building simple sequences, like moving forward, turning, and stopping. This will give you a feel for how the instructions work together. The more you experiment, the more control you\u2019ll have over FOSSBot\u2019s behavior!</p> <p>By understanding instructions and sequences, you\u2019ve taken the first step in programming FOSSBot. Next, we\u2019ll explore how to make your programs more powerful using logic and loops.</p> <p>Here\u2019s a more fluid version of the Movement Blocks section without the overuse of horizontal lines:</p>"},{"location":"programming/#4-movement-blocks","title":"4. Movement Blocks","text":"<p>The Movement category is where you\u2019ll find all the blocks that control FOSSBot\u2019s motors and movement. These blocks let you move the robot in any direction and control its turns with precision. Let\u2019s break down the key movement blocks and how you can use them.</p>"},{"location":"programming/#move-forward-for-x-cm","title":"Move Forward for <code>&lt;x&gt;</code> cm","text":"<p>This block allows you to move FOSSBot forward for a specific distance. You can set the distance by replacing <code>&lt;x&gt;</code> with any number (in centimeters).</p> <p>For example:</p> <ul> <li>If you set it to 10, the robot will move forward exactly 10 cm and then stop.</li> </ul> <p>This block is great when you need precise movement control.</p>"},{"location":"programming/#move-forward","title":"Move Forward","text":"<p>With the Move Forward block, FOSSBot will continue moving forward until another action is executed. For instance, if you follow this block with a Wait block or a Turn block, the robot will keep moving until that next action happens.</p> <p>This block is perfect for longer, continuous movements where you want the robot to keep going until something else interrupts it.</p>"},{"location":"programming/#move-one-step-forward","title":"Move One Step Forward","text":"<p>This block moves FOSSBot by one encoder step \u2014 a small, predefined distance measured by the robot\u2019s internal encoders. This is useful for fine-tuning your movements when you need very precise control over the robot\u2019s position.</p>"},{"location":"programming/#moving-backward","title":"Moving Backward","text":"<p>Just like with forward movement, you can use these blocks to make FOSSBot move backward: - Move backward for <code>&lt;x&gt;</code> cm: Move backward by a specific distance. - Move backward: Continue moving backward until another action interrupts. - Move one step backward: Move by one encoder step in reverse.</p>"},{"location":"programming/#turning","title":"Turning","text":"<p>FOSSBot can turn either continuously or by a specific angle using the Turn Right and Turn Left blocks.</p> <ul> <li>Turn right and turn left: The robot will keep turning in the specified direction until another action interrupts.</li> <li>Turn right 90 degrees and turn left 90 degrees: These blocks make the robot turn exactly 90 degrees to the right or left, perfect for making sharp, precise turns.</li> </ul>"},{"location":"programming/#stop","title":"Stop","text":"<p>The Stop block does exactly what it says: it stops all movement immediately. You can use it to halt the robot after it\u2019s finished a movement or turn.</p>"},{"location":"programming/#example-move-turn-and-stop","title":"Example: Move, Turn, and Stop","text":"<p>Let\u2019s walk through a simple example where FOSSBot moves forward, turns, and then stops.</p> <ol> <li> <p>Move Forward for 10 cm    Drag the Move Forward for 10 cm block into your workspace.</p> </li> <li> <p>Turn Right 90 Degrees    Next, add the Turn Right 90 Degrees block after the move block. This will make the robot turn after moving.</p> </li> <li> <p>Stop    Finally, drag in the Stop block to stop the robot after the turn.</p> </li> </ol> <p>Here\u2019s how your program might look:</p> <p></p> <p>Once you run this program, FOSSBot will move forward 10 cm, turn 90 degrees to the right, and then stop.</p>"},{"location":"programming/#with-these-movement-blocks-you-now-have-the-tools-to-control-how-fossbot-navigates-through-its-environment-try-experimenting-by-combining-different-movements-to-create-paths-or-navigate-obstacles","title":"With these movement blocks, you now have the tools to control how FOSSBot navigates through its environment. Try experimenting by combining different movements to create paths or navigate obstacles!","text":"<p>Here\u2019s a friendly and clear explanation of the Interaction Blocks section:</p>"},{"location":"programming/#5-interaction-blocks","title":"5. Interaction Blocks","text":"<p>The Interaction blocks let you control FOSSBot\u2019s non-movement features, like playing sounds, changing LED colors, and managing time delays. These blocks help bring your robot to life by adding feedback and effects to your programs.</p>"},{"location":"programming/#play-sound-sound-name","title":"Play Sound <code>&lt;sound name&gt;</code>","text":"<p>Want your robot to make some noise? With the Play Sound block, you can play a sound through FOSSBot\u2019s speaker. You can choose from different sound options, such as beeps or preloaded sounds.</p> <p>For example, you might play a sound when FOSSBot completes a task or detects an obstacle.</p>"},{"location":"programming/#set-led-color","title":"Set LED Color","text":"<p>FOSSBot has LEDs that can change colors based on your instructions. The Set LED Color block lets you select a color for the LED lights, allowing you to create visual feedback for different actions.</p> <p>For example:</p> <ul> <li>You can set the LED to turn red when the robot stops.</li> <li>Or make it green when the robot is moving forward.</li> </ul>"},{"location":"programming/#wait-x-seconds","title":"Wait <code>&lt;x&gt;</code> Seconds","text":"<p>The Wait block is used to introduce a delay in your program. You can set it to wait for a specific number of seconds before continuing to the next instruction. This is particularly useful when you need to pause the robot\u2019s actions temporarily.</p> <p>For example:</p> <ul> <li>You could make FOSSBot wait 2 seconds after moving forward before turning.</li> </ul>"},{"location":"programming/#timer-functions","title":"Timer Functions","text":"<p>The timer functions allow you to measure how much time has passed during a task. There are three main blocks related to timers:</p> <ul> <li>Begin Timer: Starts the timer.</li> <li>Stop Timer: Stops the timer.</li> <li>Get Timer: Returns the amount of time that has passed since the timer started.</li> </ul> <p>These blocks are great for tasks where you want to track time, like measuring how long it takes FOSSBot to complete a specific action.</p>"},{"location":"programming/#example-change-the-led-color-and-add-a-wait","title":"Example: Change the LED Color and Add a Wait","text":"<p>Let\u2019s try a quick example using these interaction blocks. In this program, we\u2019ll change the LED color, make the robot wait for 3 seconds, and then continue.</p> <ol> <li> <p>Set LED Color to Red    Drag the Set LED Color block into your workspace, and set it to Red.</p> </li> <li> <p>Wait for 3 Seconds    Next, drag in the Wait 3 Seconds block. This will make FOSSBot pause for 3 seconds.</p> </li> <li> <p>Move Forward for 10 cm    To complete the program, add a Move Forward for 10 cm block after the wait.</p> </li> </ol> <p>Here\u2019s how your program might look:</p> <p></p> <p>When you run this program, FOSSBot will change its LED color to red, wait for 3 seconds, and then move forward 10 cm.</p> <p>These interaction blocks give you the power to make FOSSBot more engaging and responsive. Try combining sounds, LED colors, and timers to make your robot even more interactive!</p> <p>Here\u2019s a user-friendly explanation of Using Sensors:</p>"},{"location":"programming/#6-using-sensors","title":"6. Using Sensors","text":"<p>FOSSBot comes equipped with several sensors that allow it to interact with its environment in smart ways. These sensors help the robot detect obstacles, measure its orientation, and even follow lines on the floor. Let\u2019s explore the different sensors available and how you can use them in your programs.</p>"},{"location":"programming/#distance-sensor","title":"Distance Sensor","text":"<p>The Distance Sensor allows FOSSBot to detect objects in front of it. You can use this sensor to make the robot stop or change direction when it gets too close to an obstacle.</p> <p>For example: - If the robot senses something in front of it, you could program it to stop moving or turn in a different direction.</p>"},{"location":"programming/#gyroscope-and-accelerometer","title":"Gyroscope and Accelerometer","text":"<p>These sensors are like FOSSBot\u2019s inner balance system. The Gyroscope measures the robot\u2019s orientation (how it\u2019s tilted or turned), while the Accelerometer measures its movement, like how fast it\u2019s speeding up or slowing down.</p> <p>You can use these sensors to control FOSSBot\u2019s movements more precisely or to create programs that respond to changes in the robot\u2019s angle or motion.</p>"},{"location":"programming/#floor-sensor","title":"Floor Sensor","text":"<p>FOSSBot\u2019s Floor Sensor detects differences between light and dark surfaces. This sensor is especially useful if you want FOSSBot to follow a specific path based on the color of the floor.</p> <p>For example: - You could make FOSSBot stop when it reaches a dark surface, or follow a white line on a darker background.</p>"},{"location":"programming/#line-detection","title":"Line Detection","text":"<p>The Line Detection feature helps FOSSBot identify lines on the floor. This is particularly handy for tasks like making the robot follow a path or stay within a designated area.</p>"},{"location":"programming/#example-detecting-obstacles","title":"Example: Detecting Obstacles","text":"<p>Let\u2019s create a simple program that uses the distance sensor to detect obstacles and make FOSSBot stop or turn when it finds one.</p> <ol> <li> <p>Move Forward    Start by adding a Move Forward block to get the robot moving.</p> </li> <li> <p>Check for Obstacles    Next, use the Distance Sensor block to check for obstacles. Drag this block into the workspace and connect it to your program.</p> </li> <li> <p>Add a Conditional Action    If an obstacle is detected, you can make the robot stop or turn. For example, add a Stop block to halt the robot when it senses something in front of it.</p> </li> </ol> <p>Your program might look something like this:</p> <p></p> <p>In this program, FOSSBot will move forward until it detects an obstacle. Once an obstacle is detected, the robot will stop.</p> <p>With these sensors, you can make FOSSBot react to its environment and navigate through obstacles, follow lines, or measure movement. Try combining different sensors to create even smarter behaviors for your robot!</p> <p>Here\u2019s the section on Logic and Control Blocks:</p>"},{"location":"programming/#7-logic-and-control-blocks","title":"7. Logic and Control Blocks","text":"<p>The Logic and Control Blocks let you take FOSSBot\u2019s programming to the next level by adding decision-making, loops, and more. With these blocks, your robot can make smart choices and perform tasks repeatedly. Let\u2019s explore how to use these powerful tools!</p>"},{"location":"programming/#if-statements","title":"If Statements","text":"<p>The If statement is one of the most important blocks in Blockly. It allows FOSSBot to make decisions based on certain conditions. Think of it like asking the robot a question: \u201cIf this happens, do this; otherwise, do something else.\u201d</p> <p>For example:</p> <ul> <li>If FOSSBot detects an obstacle with its distance sensor, you can tell it to turn left.</li> <li>If there\u2019s no obstacle, it can keep moving forward.</li> </ul> <p>This is super useful for making FOSSBot responsive to its environment.</p>"},{"location":"programming/#loops_1","title":"Loops","text":"<p>The Loops category helps you automate repetitive tasks. Instead of programming the robot to perform the same action multiple times, you can use a loop to repeat the action automatically.</p> <p>Here are the key loop blocks:</p> <ul> <li>Repeat: Perform an action a set number of times. For example, move forward 10 times.</li> <li>While: Keep performing an action while a condition is true. For example, keep moving forward while there\u2019s no obstacle.</li> </ul> <p>Loops save time and make your program cleaner and easier to understand.</p>"},{"location":"programming/#boolean-logic","title":"Boolean Logic","text":"<p>Boolean logic is the fancy term for working with true/false values. In Blockly, you can use these true/false blocks to help FOSSBot decide what to do. For instance:</p> <ul> <li>True: You can use this value to indicate that a condition is met (like \u201cobstacle detected\u201d).</li> <li>False: Use this when a condition is not met (like \u201cno obstacle\u201d).</li> </ul> <p>Combining Boolean logic with If statements and Loops lets you create smart programs that can adapt to different situations.</p>"},{"location":"programming/#example-turn-left-if-an-obstacle-is-detected","title":"Example: Turn Left if an Obstacle is Detected","text":"<p>Let\u2019s walk through a quick example where we use an If statement and a Loop to make FOSSBot turn left if an obstacle is detected.</p> <ol> <li> <p>Start with a Loop    Drag a Repeat While block into the workspace. This will allow the robot to keep checking for obstacles while it\u2019s moving.</p> </li> <li> <p>Add the If Statement    Inside the loop, place an If block. This will ask, \u201cIs there an obstacle?\u201d You\u2019ll use the distance sensor to answer this question.</p> </li> <li> <p>Turn Left if True    If the robot detects an obstacle (true), drag a Turn Left block into the If block. This will make the robot turn when it finds something in its path.</p> </li> <li> <p>Move Forward if False    If no obstacle is detected (false), add a Move Forward block to keep the robot moving.</p> </li> </ol> <p>Here\u2019s what your program might look like:</p> <p></p> <p>In this example, FOSSBot will continuously move forward until it detects an obstacle. When it finds one, the robot will turn left and continue checking for more obstacles.</p> <p>With Logic and Control Blocks, you can create programs that make decisions and repeat actions, making FOSSBot much smarter and more dynamic. Try experimenting with different conditions and loops to see how the robot behaves!</p>"},{"location":"troubleshooting/","title":"Diagnostics","text":"<p>This page is work in progress but a PDF is already available :</p> <p>Download PDF</p> <p></p>"}]}